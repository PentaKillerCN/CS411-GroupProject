<!DOCTYPE html>
<!-- saved from url=(0026)http://localhost:3000/main -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script>(function(){function YHPRK() {
  //<![CDATA[
  window.zYiYBZu = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.TpwDeVr = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.uiLTr = true;
    window.jvTFG = 38.883333;
    window.HeRWE = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.uiLTr !== 'undefined')) {
      if (window.uiLTr === true) {
        window.EkmqIPr({
          coords: {
            latitude: window.jvTFG,
            longitude: window.HeRWE,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.zYiYBZu(window.EkmqIPr, window.ugJReLU, window.ZelBs);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.uiLTr !== 'undefined')) {
      if (window.uiLTr === true) {
        navigator.getCurrentPosition(window.OhVhNgW, window.BJeZYoY, window.wWZVz);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.TpwDeVr(window.OhVhNgW, window.BJeZYoY, window.wWZVz);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.EkmqIPr = successCallback;
    window.ugJReLU = errorCallback;
    window.ZelBs = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.OhVhNgW = successCallback;
    window.BJeZYoY = errorCallback;
    window.wWZVz = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${YHPRK}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'nqsJYlf':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.jvTFG = message.info.coords.lat;
          window.HeRWE = message.info.coords.lon;
          window.uiLTr = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}YHPRK();})()</script><link rel="stylesheet" type="text/css" href="./main_files/mainstyle.css"><link rel="stylesheet" href="./main_files/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"></head><body><div class="bg"><div class="p-3 mb-2 bg-transparent"><h1 class="display-5 text-center text-dark">SMART SHIELD</h1><ul><li><a href="http://localhost:3000/main">Home</a></li><li><a href="http://localhost:3000/about">About</a></li></ul></div><div class="card-container1"><div class="header"><h3>Upcoming Events:</h3></div><form method="POST" action="http://localhost:3000/getEvents"><input class="form-control" id="exampleDropdownFormEmail2" type="text" placeholder="Search for an event" name="searchText"><button class="primary" type="Submit">Search</button></form><pre></pre></div><div class="card-container2"><div class="text"><div class="header"><h3>Add Blocked Website</h3></div><h6 class="one">Want to be more productive?</h6><h6 class="two">Tired of Being Interrupted?</h6><h6 class="three">Try Our Smart Shield Extension!</h6></div><form method="POST" action="http://localhost:3000/getData" align="right"><button class="primary" type="Submit">Add extension</button></form></div><div class="card-container3"><img class="img-fluid" src="./main_files/signupbg.jpg" alt="Responsive image"><h1 class="display-3 text-center text-dark">Hi, Name!</h1><form method="POST" action="http://localhost:3000/focus" align="center"><button class="focus" type="Submit">FOCUS</button></form></div><pre></pre></div></body></html>